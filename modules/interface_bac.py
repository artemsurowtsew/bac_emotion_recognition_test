# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Artem\PycharmProjects\pythonProject\dlib\interface_bac.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import cv2
import mss
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from tensorflow.keras.models import model_from_json
from PyQt5.QtCore import Qt, QThread,pyqtSignal

class Ui_EmotionRecognition(object):
    def setupUi(self, EmotionRecognition):
        EmotionRecognition.setObjectName("EmotionRecognition")
        EmotionRecognition.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(EmotionRecognition)
        self.centralwidget.setObjectName("centralwidget")
        self.screen_thread = QtWidgets.QLabel(self.centralwidget)
        self.screen_thread.setGeometry(QtCore.QRect(10, 10, 640, 480))
        self.screen_thread.setMinimumSize(QtCore.QSize(640, 480))
        self.screen_thread.setMaximumSize(QtCore.QSize(640, 480))
        self.screen_thread.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.screen_thread.setText("")
        self.screen_thread.setObjectName("screen_thread")
        EmotionRecognition.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(EmotionRecognition)
        self.menubar.setGeometry(QtCore.QRect(710, 400, 132, 41))
        self.menubar.setObjectName("menubar")
        EmotionRecognition.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(EmotionRecognition)
        self.statusbar.setObjectName("statusbar")
        EmotionRecognition.setStatusBar(self.statusbar)

        self.retranslateUi(EmotionRecognition)
        QtCore.QMetaObject.connectSlotsByName(EmotionRecognition)

    def retranslateUi(self, EmotionRecognition):
        _translate = QtCore.QCoreApplication.translate
        EmotionRecognition.setWindowTitle(_translate("EmotionRecognition", "MainWindow"))



from interface_bac import Ui_EmotionRecognition

class MainWindow(QtWidgets.QMainWindow, Ui_EmotionRecognition):
    def __init__(self):
        super().__init__()
        # Настройка интерфейса
        self.setupUi(self)
        self.load_emotion_model()

        # Установка таймера для захвата экрана
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.capture_screen)
        self.timer.start(24)  # Захват экрана каждые 100 мс

    def load_emotion_model(self):
        # Загрузка модели и весов
        with open(r"C:\Users\Artem\PycharmProjects\pythonProject\model\surovtsev_f12.json") as json_file:
            loaded_model_json = json_file.read()
        self.emotion_model = model_from_json(loaded_model_json)
        self.emotion_model.load_weights(r"C:\Users\Artem\PycharmProjects\pythonProject\model\surovtsev_f12.h5")
        print("Модель эмоций успешно загружена")

    def capture_screen(self):
        # Захват экрана
        with mss.mss() as sct:
            monitor = {"top": 0, "left": 0, "width": 1920, "height": 1080}
            img = np.array(sct.grab(monitor))

        # Обработка изображения и распознавание эмоций
        self.process_frame(img)

    def process_frame(self, frame):
        # Преобразование изображения в оттенки серого для обнаружения лиц
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Обнаружение лиц
        face_cascade = cv2.CascadeClassifier(
            r'C:\Users\Artem\PycharmProjects\pythonProject\haarcascades/haarcascade_frontalface_default.xml')
        faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        # Для каждого обнаруженного лица
        for (x, y, w, h) in faces:
            face_roi = frame[y:y + h, x:x + w]  # Обрезать лицо

        # Перетворення зображення назад в BGR для відображення
        color_frame = cv2.cvtColor(gray_frame, cv2.COLOR_GRAY2BGR)

        # Відображення зображення
        self.screen_thread.setPixmap(QtGui.QPixmap.fromImage(
            QtGui.QImage(color_frame.data, color_frame.shape[1], color_frame.shape[0],
                         QtGui.QImage.Format_RGB888).rgbSwapped()))



if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
